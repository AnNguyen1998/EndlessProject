{"version":3,"sources":["../../../../../assets/Scripts/EventEmitter/assets/Scripts/EventEmitter/Emitter.js"],"names":["EventEmitter","require","mEmitter","_emiter","setMaxListeners","emit","event","listener","on","once","removeListener","eventsMap","registerEvent","removeEvent","removeAllListeners","instance","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,eAAeC,QAAQ,QAAR,CAArB;;IACMC;AACF,wBAAc;AAAA;;AACV,aAAKC,OAAL,GAAe,IAAIH,YAAJ,EAAf;AACA,aAAKG,OAAL,CAAaC,eAAb,CAA6B,GAA7B;AACH;;;;+BACa;AAAA;;AACV,4BAAKD,OAAL,EAAaE,IAAb;AACH;;;sCACaC,OAAOC,UAAU;AAC3B,iBAAKJ,OAAL,CAAaK,EAAb,CAAgBF,KAAhB,EAAuBC,QAAvB;AACH;;;qCACYD,OAAOC,UAAU;AAC1B,iBAAKJ,OAAL,CAAaM,IAAb,CAAkBH,KAAlB,EAAyBC,QAAzB;AACH;;;oCACWD,OAAOC,UAAU;AACzB,iBAAKJ,OAAL,CAAaO,cAAb,CAA4BJ,KAA5B,EAAmCC,QAAnC;AACH;;;0CACiBI,WAAW;AACzB,iBAAI,IAAML,KAAV,IAAmBK,SAAnB,EAA8B;AAC1B,qBAAKC,aAAL,CAAmBN,KAAnB,EAA0BK,UAAUL,KAAV,CAA1B;AACH;AACJ;;;wCACeK,WAAW;AACvB,iBAAI,IAAML,KAAV,IAAmBK,SAAnB,EAA8B;AAC1B,qBAAKE,WAAL,CAAiBP,KAAjB,EAAwBK,UAAUL,KAAV,CAAxB;AACH;AACJ;;;kCACS;AACN,iBAAKH,OAAL,CAAaW,kBAAb;AACA,iBAAKX,OAAL,GAAe,IAAf;AACAD,qBAASa,QAAT,GAAoB,IAApB;AACH;;;;;;AAGLb,SAASa,QAAT,GAAoB,IAApB;;AAEA,IAAI,CAACb,SAASa,QAAd,EAAwB;AACpBb,aAASa,QAAT,GAAoB,IAAIb,QAAJ,EAApB;AAEH;AACDc,OAAOC,OAAP,GAAiBf,QAAjB","file":"Emitter.js","sourceRoot":"../../../../../assets/Scripts/EventEmitter","sourcesContent":["const EventEmitter = require('events');\nclass mEmitter {\n    constructor() {\n        this._emiter = new EventEmitter();\n        this._emiter.setMaxListeners(100);\n    }\n    emit(...args) {\n        this._emiter.emit(...args);\n    }\n    registerEvent(event, listener) {\n        this._emiter.on(event, listener);\n    }\n    registerOnce(event, listener) {\n        this._emiter.once(event, listener);\n    }\n    removeEvent(event, listener) {\n        this._emiter.removeListener(event, listener);\n    }\n    registerEventsMap(eventsMap) {\n        for(const event in eventsMap) {\n            this.registerEvent(event, eventsMap[event]);\n        }\n    }\n    removeEventsMap(eventsMap) {\n        for(const event in eventsMap) {\n            this.removeEvent(event, eventsMap[event]);\n        }\n    }\n    destroy() {\n        this._emiter.removeAllListeners();\n        this._emiter = null;\n        mEmitter.instance = null;\n    }\n}\n\nmEmitter.instance = null;\n\nif (!mEmitter.instance) {\n    mEmitter.instance = new mEmitter();\n\n}\nmodule.exports = mEmitter;"]}